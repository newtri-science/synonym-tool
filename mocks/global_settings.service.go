// Code generated by MockGen. DO NOT EDIT.
// Source: services/global_settings.service.go
//
// Generated by this command:
//
//	mockgen -source services/global_settings.service.go -destination mocks/global_settings.service.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/michelm117/cycling-coach-lab/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGlobalSettingServicer is a mock of GlobalSettingServicer interface.
type MockGlobalSettingServicer struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalSettingServicerMockRecorder
}

// MockGlobalSettingServicerMockRecorder is the mock recorder for MockGlobalSettingServicer.
type MockGlobalSettingServicerMockRecorder struct {
	mock *MockGlobalSettingServicer
}

// NewMockGlobalSettingServicer creates a new mock instance.
func NewMockGlobalSettingServicer(ctrl *gomock.Controller) *MockGlobalSettingServicer {
	mock := &MockGlobalSettingServicer{ctrl: ctrl}
	mock.recorder = &MockGlobalSettingServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalSettingServicer) EXPECT() *MockGlobalSettingServicerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGlobalSettingServicer) Create(setting *model.GlobalSetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGlobalSettingServicerMockRecorder) Create(setting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGlobalSettingServicer)(nil).Create), setting)
}

// GetBySectionAndName mocks base method.
func (m *MockGlobalSettingServicer) GetBySectionAndName(sectionName, settingName string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySectionAndName", sectionName, settingName)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySectionAndName indicates an expected call of GetBySectionAndName.
func (mr *MockGlobalSettingServicerMockRecorder) GetBySectionAndName(sectionName, settingName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySectionAndName", reflect.TypeOf((*MockGlobalSettingServicer)(nil).GetBySectionAndName), sectionName, settingName)
}

// InitializeApp mocks base method.
func (m *MockGlobalSettingServicer) InitializeApp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeApp")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeApp indicates an expected call of InitializeApp.
func (mr *MockGlobalSettingServicerMockRecorder) InitializeApp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeApp", reflect.TypeOf((*MockGlobalSettingServicer)(nil).InitializeApp))
}

// IsAppInitialized mocks base method.
func (m *MockGlobalSettingServicer) IsAppInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAppInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAppInitialized indicates an expected call of IsAppInitialized.
func (mr *MockGlobalSettingServicerMockRecorder) IsAppInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAppInitialized", reflect.TypeOf((*MockGlobalSettingServicer)(nil).IsAppInitialized))
}

// ParseSettingsValue mocks base method.
func (m *MockGlobalSettingServicer) ParseSettingsValue(settingType int, settingValue string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSettingsValue", settingType, settingValue)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSettingsValue indicates an expected call of ParseSettingsValue.
func (mr *MockGlobalSettingServicerMockRecorder) ParseSettingsValue(settingType, settingValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSettingsValue", reflect.TypeOf((*MockGlobalSettingServicer)(nil).ParseSettingsValue), settingType, settingValue)
}
