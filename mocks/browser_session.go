// Code generated by MockGen. DO NOT EDIT.
// Source: utils/browser_session.go
//
// Generated by this command:
//
//	mockgen -source utils/browser_session.go -destination mocks/browser_session.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sessions "github.com/gorilla/sessions"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockBrowserSessionManager is a mock of BrowserSessionManager interface.
type MockBrowserSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockBrowserSessionManagerMockRecorder
}

// MockBrowserSessionManagerMockRecorder is the mock recorder for MockBrowserSessionManager.
type MockBrowserSessionManagerMockRecorder struct {
	mock *MockBrowserSessionManager
}

// NewMockBrowserSessionManager creates a new mock instance.
func NewMockBrowserSessionManager(ctrl *gomock.Controller) *MockBrowserSessionManager {
	mock := &MockBrowserSessionManager{ctrl: ctrl}
	mock.recorder = &MockBrowserSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrowserSessionManager) EXPECT() *MockBrowserSessionManagerMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockBrowserSessionManager) DeleteSession(c echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockBrowserSessionManagerMockRecorder) DeleteSession(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockBrowserSessionManager)(nil).DeleteSession), c)
}

// Get mocks base method.
func (m *MockBrowserSessionManager) Get(c echo.Context) (*sessions.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c)
	ret0, _ := ret[0].(*sessions.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBrowserSessionManagerMockRecorder) Get(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBrowserSessionManager)(nil).Get), c)
}

// SaveSession mocks base method.
func (m *MockBrowserSessionManager) SaveSession(c echo.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", c, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockBrowserSessionManagerMockRecorder) SaveSession(c, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockBrowserSessionManager)(nil).SaveSession), c, sessionID)
}
