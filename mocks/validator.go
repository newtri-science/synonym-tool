// Code generated by MockGen. DO NOT EDIT.
// Source: utils/validator.go
//
// Generated by this command:
//
//	mockgen -source utils/validator.go -destination mocks/validator.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/michelm117/cycling-coach-lab/model"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// CreateValidUser mocks base method.
func (m *MockValidator) CreateValidUser(firstname, lastname, role, email, dateOfBirthStr, password, confirmPassword string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValidUser", firstname, lastname, role, email, dateOfBirthStr, password, confirmPassword)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateValidUser indicates an expected call of CreateValidUser.
func (mr *MockValidatorMockRecorder) CreateValidUser(firstname, lastname, role, email, dateOfBirthStr, password, confirmPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValidUser", reflect.TypeOf((*MockValidator)(nil).CreateValidUser), firstname, lastname, role, email, dateOfBirthStr, password, confirmPassword)
}

// ValidateEmail mocks base method.
func (m *MockValidator) ValidateEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateEmail indicates an expected call of ValidateEmail.
func (mr *MockValidatorMockRecorder) ValidateEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEmail", reflect.TypeOf((*MockValidator)(nil).ValidateEmail), email)
}

// ValidateNonEmptyStringField mocks base method.
func (m *MockValidator) ValidateNonEmptyStringField(fieldName, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNonEmptyStringField", fieldName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateNonEmptyStringField indicates an expected call of ValidateNonEmptyStringField.
func (mr *MockValidatorMockRecorder) ValidateNonEmptyStringField(fieldName, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNonEmptyStringField", reflect.TypeOf((*MockValidator)(nil).ValidateNonEmptyStringField), fieldName, value)
}

// ValidatePassword mocks base method.
func (m *MockValidator) ValidatePassword(password, confirmPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", password, confirmPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockValidatorMockRecorder) ValidatePassword(password, confirmPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockValidator)(nil).ValidatePassword), password, confirmPassword)
}

// ValidateRole mocks base method.
func (m *MockValidator) ValidateRole(role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRole", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRole indicates an expected call of ValidateRole.
func (mr *MockValidatorMockRecorder) ValidateRole(role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRole", reflect.TypeOf((*MockValidator)(nil).ValidateRole), role)
}
